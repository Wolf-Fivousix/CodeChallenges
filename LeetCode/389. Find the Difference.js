// Easy

// You are given two strings s and t.

// String t is generated by random shuffling string s and then add one more letter at a random position.

// Return the letter that was added to t.

// Example 1:

// Input: s = "abcd", t = "abcde"
// Output: "e"
// Explanation: 'e' is the letter that was added.
// Example 2:

// Input: s = "", t = "y"
// Output: "y"
// Example 3:

// Input: s = "a", t = "aa"
// Output: "a"
// Example 4:

// Input: s = "ae", t = "aea"
// Output: "a"
 

// Constraints:

// 0 <= s.length <= 1000
// t.length == s.length + 1
// s and t consist of lower-case English letters.

/**
 * @param {string} s
 * @param {string} t
 * @return {character}
 */

// Do I need to check for that +1 lenght? - No, is in the constrains.
/*
First (Brute Force) approach:
    Scan through T, for each letter, look for it at S.
        If not found, return the letter.
        If found, remove that letter from S, so it is not found again.
            Or, if we don't want to copy/modify S, we can create a lookup hash table and keep track of the indexes already found
            Whenever a match is found, we check the indexes. If it is already existent, keep looking. Otherwise, add it.
    Very inneficient, Exponential O(N * M) for scanning T and then S.
    
Second (Better) approach:
W know they are the same + 1 length. We also know they have the SAME letters, except for one.
Let's save memory and do a Log Linear sorting with Linear Scan. This way the Time Complexity will be Log Linear and Space Constant.
    Sort both strings (if we use copies, we have Space Complexity of S + T).
    Loop through S's length:
        Compare S char with T char.
        If different, return T char.
    Loop completed without returning, that means the new char is the last one.
    Return T last char

*/
function findTheDifference(s, t) {
    
};